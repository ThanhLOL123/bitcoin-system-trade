version: '3.8'

services:
  # Database Services
  postgresql:
    image: postgres:14
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  influxdb:
    image: influxdb:1.8
    environment:
      INFLUXDB_DB: ${INFLUXDB_DB}
      INFLUXDB_USER: ${INFLUXDB_USER}
      INFLUXDB_USER_PASSWORD: ${INFLUXDB_PASSWORD}
    ports:
      - "8086:8086"
    volumes:
      - influx_data:/var/lib/influxdb

  # Message Queue
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  # ML Infrastructure
  mlflow:
    image: ghcr.io/mlflow/mlflow:latest
    ports:
      - "5000:5000"
    environment:
      BACKEND_STORE_URI: ${MLFLOW_BACKEND_STORE_URI}
      DEFAULT_ARTIFACT_ROOT: ${MLFLOW_DEFAULT_ARTIFACT_ROOT}
    command: >
      mlflow server 
      --backend-store-uri ${MLFLOW_BACKEND_STORE_URI}
      --default-artifact-root ${MLFLOW_DEFAULT_ARTIFACT_ROOT}
      --host 0.0.0.0
    depends_on:
      - postgresql

  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning

  data-collector:
    build:
      context: .
      dockerfile: src/data_collector/Dockerfile
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - LOG_LEVEL=${LOG_LEVEL}
      - REDDIT_CLIENT_ID=${REDDIT_CLIENT_ID}
      - REDDIT_CLIENT_SECRET=${REDDIT_CLIENT_SECRET}
      - REDDIT_USER_AGENT=${REDDIT_USER_AGENT}
    depends_on:
      - kafka
      - redis
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    command: python -m src.data_collector.scheduler

  feature-engineering:
    build:
      context: .
      dockerfile: src/feature_engineering/Dockerfile
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - LOG_LEVEL=${LOG_LEVEL}
    depends_on:
      - kafka
      - postgresql
      - redis
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
      - ./feature_store:/app/feature_store
    command: python -m src.feature_engineering.kafka_consumer

  ml-pipeline:
    build:
      context: .
      dockerfile: src/ml_pipeline/Dockerfile
    environment:
      - MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI}
      - LOG_LEVEL=${LOG_LEVEL}
    depends_on:
      - mlflow
      - postgresql
      - redis
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
      - ./ml_models:/app/ml_models
      - ./feature_store:/app/feature_store
    command: python -m src.ml_pipeline.training.trainer

  trading-bot:
    build:
      context: .
      dockerfile: src/trading_bot/Dockerfile
    environment:
      - MT5_LOGIN=${MT5_LOGIN}
      - MT5_PASSWORD=${MT5_PASSWORD}
      - MT5_SERVER=${MT5_SERVER}
      - LOG_LEVEL=${LOG_LEVEL}
      - MT5_RPC_HOST=${MT5_RPC_HOST}
      - MT5_RPC_PORT=${MT5_RPC_PORT}
    depends_on:
      - kafka
      - redis
      - ml-pipeline
      - mt5-server
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    command: python -m src.trading_bot.trading_bot

  api:
    build:
      context: .
      dockerfile: src/api/Dockerfile
    environment:
      - LOG_LEVEL=${LOG_LEVEL}
    ports:
      - "8000:8000"
    depends_on:
      - ml-pipeline
      - redis
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    command: uvicorn src.api.main:app --host 0.0.0.0 --port 8000

  mt5-server:
    build:
      context: ./mt5_rpc_server
      dockerfile: Dockerfile
    ports:
      - "18812:18812" # RPC port
    environment:
      - MT5_LOGIN=${MT5_LOGIN}
      - MT5_PASSWORD=${MT5_PASSWORD}
      - MT5_SERVER=${MT5_SERVER}
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  influx_data:
  minio_data:
  prometheus_data:
  grafana_data:
